##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################

###### Additional includes that are specific to this directory ######

# Placeholder for additional include files.


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := 

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS := # test_mini

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
# TOOL_ROOTS := SymTableDetector
TOOL_ROOTS := Tracer

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS := # mini_test

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS := 

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS := 

###### Place architecture-specific definitions here ######

# Place ia32-specific definitions here if they apply to all supported operating systems.
ifeq ($(TARGET),ia32)
    TOOL_CXXFLAGS += -m32 
    # LIBDFT_INC_PATH	= $(realpath ../../src32/)
    # LIBDFT_PATH	= $(realpath ../../src32/obj-ia32/)
    LIBDFT_INC_PATH	= /libdft/src32/
    LIBDFT_PATH	= /libdft/src32/obj-ia32/
endif

# Place intel64-specific definitions here if they apply to all supported operating systems.
ifeq ($(TARGET),intel64)
	TOOL_CXXFLAGS +=
    ifeq ($(CXX),cl)
        LIBDFT_INC_PATH = $(shell cygpath -w -m $(shell realpath ../lib/libdft64/src))
        LIBDFT_PATH = $(shell cygpath -w -m $(shell realpath ../lib/libdft64/src/obj-intel64))
    else
        LIBDFT_INC_PATH	= $(realpath ../lib/libdft64/src/)
        LIBDFT_PATH	= $(realpath ../lib/libdft64/src/obj-intel64/)
    endif
endif

##############################################################
#
# Test recipes
#
##############################################################

###### Finalize sanity here ######

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

###### Special tools' build rules ######

LOGGING_FLAGS = -DNO_PINTOOL_LOG
ifeq ($(CXX),cl)
    TOOL_CXXFLAGS += $(LOGGING_FLAGS) /I$(LIBDFT_INC_PATH)
else
    TOOL_CXXFLAGS += $(LOGGING_FLAGS) -I$(LIBDFT_INC_PATH) -L$(LIBDFT_PATH)
endif
ifeq ($(LINKER),link)
    TOOL_LIBS += /LIBPATH:$(LIBDFT_PATH) libdft.lib
else
    TOOL_LIBS += -L$(LIBDFT_PATH) -ldft
endif

# INPUT_FILE=cur_input
# test_mini: $(OBJDIR)/track$(PINTOOL_SUFFIX) ${OBJDIR}/mini_test$(EXE_SUFFIX)
# 	$(PIN) -t $< -- $(OBJDIR)mini_test$(EXE_SUFFIX)  ${INPUT_FILE}

# Build the intermediate object file.

$(OBJDIR)config$(OBJ_SUFFIX): config.cpp config.h
	$(CC) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)handler$(OBJ_SUFFIX): handler.cpp handler.h
	$(CC) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)log$(OBJ_SUFFIX): log.cpp log.h
	$(CC) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)print$(OBJ_SUFFIX): print.cpp print.h
	$(CC) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)ptr_taint$(OBJ_SUFFIX): ptr_taint.cpp ptr_taint.h
	$(CC) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)util$(OBJ_SUFFIX): util.cpp util.h
	$(CC) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# $(OBJDIR)SymTableDetector$(OBJ_SUFFIX): SymTableDetector.cpp
$(OBJDIR)Tracer$(OBJ_SUFFIX): Tracer.cpp Tracer.h
	$(CC) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build the tool as a dll (shared object).
$(OBJDIR)Tracer$(PINTOOL_SUFFIX): $(OBJDIR)Tracer$(OBJ_SUFFIX) $(OBJDIR)config$(OBJ_SUFFIX) $(OBJDIR)handler$(OBJ_SUFFIX) $(OBJDIR)log$(OBJ_SUFFIX) $(OBJDIR)print$(OBJ_SUFFIX) $(OBJDIR)ptr_taint$(OBJ_SUFFIX) $(OBJDIR)util$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS_NOOPT) $(LINK_EXE)$@ $(^:%.h=) $(TOOL_LPATHS) $(TOOL_LIBS)
